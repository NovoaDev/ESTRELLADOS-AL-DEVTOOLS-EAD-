{
	"tblobescribir": {
		"prefix": "tblob escribir desde texto (EAD)",
		"body": [
			"procedure ${1:SetBlob}(Text: Text)\r",
			"var \r",
			"    OutStream: OutStream; \r",
			"begin \r",
			"    ${2:\"Campo BLOB\"}.CreateOutStream(OutStream); \r",
			"    OutStream.WriteText(Text); \r",
			"end; "
		],
		"description": "Escribir un campo de tipo blob desde un texto (EAD)"
	},
	"tblobleer": {
		"prefix": "tblob obtener texto desde blob (EAD)",
		"body": [
			"procedure ${1:GetBlob}(): Text \r",
			"Var \r",
			"    InStream: InStream; \r",
			"    Text: Text; \r",
			"Begin \r",
			"    CalcFields(${2:\"Campo BLOB\"}); \r",
			"    ${2:\"Campo BLOB\"}.CreateInStream(InStream); \r",
			"    InStream.ReadText(Text); \r",
			"    exit(Text); \r",
			"end; "
		],
		"description": "Obtener texto desde un campo de tipo blob (EAD)"
    },
    "tsing": {
        "prefix": "tfirma una línea (EAD)",
        "body": [
            "//${1:Requerimiento} - ${2:Iniciales} - $CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR - ${3:Descripción}"
        ],
        "description": "Plantilla para firmar codigo una linea (EAD)"
    },
    "tsingMultiline": {
       "prefix": "tfirma multilínea (EAD)",
       "body": [
           "//${1:Requerimiento} - ${2:Iniciales} - $CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR - ${3:Descripción}",
           " ",
           "//$1 - $2 - FIN"
       ],
       "description": "Plantilla para firmar codigo multilínea (EAD)"
	},
	"tfindset": {
		"prefix": "tfindset recorrer record (EAD)",
		"body": [
			"        if not ${1:record}.IsEmpty() then",
			"            if ${1:record}.Findset() then",
			"                repeat",
			"",
			"                until ${1:record}.next() = 0;"
		],
		"description": "Snippet plantilla para recorrer record (EAD)"
	},
	"tcampoPagina": {
		"prefix": "tcampo en pagina con tooltip (EAD)",
		"body": [
			"field(${1:Campo})",
			"{",
			"\tApplicationArea = All;",
			"\tToolTip = '${2:ENU}', comment = 'ESP=\"${3:ESP}\"';",
			"}"
		],
		"description": "Snippet plantilla para crear campos en tablas con tooltip (EAD)"
	}, 
	"tnotification": {
        "prefix": "tnotification (EAD)",
        "body": [
			" local procedure ShowNotifications(id: Guid)\r",
			"    var\r",
			"        MyNotifications: Record \"My Notifications\";\r",
			"        TheNotification: Notification;\r",
			"        MessageTextLbl: label 'Texto Notificacion', comment = 'ESP=\"Texto Notificacion\"';\r",
			"    begin\r",
			"        //Insertar registro en la tabla mi notifications mostrandola por defecto\r",
			"        if NOT MyNotifications.Get(UserId(), Id) then\r",
			"            MyNotifications.InsertDefault(Id, 'NombreMiNotificacion', 'DescripcionMiNotificacion', true);\r",
			"\r",
			"        if MyNotifications.Get(UserId(), Id) then\r",
			"            if MyNotifications.Enabled then\r",
			"                if Validations() then begin\r",
			"                    TheNotification.Id := id;\r",
			"                    TheNotification.Message := MessageTextLbl;\r",
			"                    TheNotification.Scope := TheNotification.Scope::LocalScope;\r",
			"                    TheNotification.SetData('Campo', '1');\r",
			"                    TheNotification.SetData('Campo2', '110');\r",
			"                    TheNotification.AddAction('CaptionAccion1', Codeunit::\"NUN4 General\", 'PaginaClienteFiltrado');\r",
			"                    TheNotification.AddAction('CaptionAccion2', Codeunit::\"NUN4 General\", 'DisableNotification');\r",
			"                    TheNotification.Send();\r",
			"                end;\r",
			"    end;\r",
			"\r",
			"    local procedure Validations(): Boolean\r",
			"    var\r",
			"        Cust: Record Customer;\r",
			"    begin\r",
			"        Cust.SetRange(\"Phone No.\", '');\r",
			"        if not Cust.IsEmpty() then\r",
			"            exit(true);\r",
			"    end;\r",
			"\r",
			"    procedure Accion1(TheNotification: Notification)\r",
			"    var\r",
			"        Cust: Record Customer;\r",
			"        iTemp: Integer;\r",
			"        iTemp2: Integer;\r",
			"        iTempFinal: Integer;\r",
			"    begin\r",
			"        //OBtener parametros\r",
			"        Evaluate(iTemp, TheNotification.GetData('Campo'));\r",
			"        Evaluate(iTemp2, TheNotification.GetData('Campo2'));\r",
			"        iTempFinal := iTemp + iTemp2;\r",
			"        message(Format(iTempFinal));\r",
			"        //OBtener parametros \r",
			"       \r",
			"        Cust.SetRange(\"Phone No.\", '');\r",
			"        page.RunModal(Page::\"Customer List\", Cust);\r",
			"    end;\r",
			"\r",
			"    procedure DisableNotification(TheNotification: Notification)\r",
			"    var\r",
			"        MyNotifications: Record \"My Notifications\";\r",
			"    begin\r",
			"        if MyNotifications.Get(UserId(), TheNotification.Id) then begin\r",
			"            MyNotifications.Validate(Enabled, false);\r",
			"            MyNotifications.Modify();\r",
			"        end\r",
			"    end;"
        ],
        "description": "Snippet para crear notificaciones no exclusiva para el usuario (EAD)"
   },
	"tcambiarcolor": {
		"prefix": "tcambiar color de campos en pagina (EAD)",
		"body": [
			"procedure ${1:fontColorChange}(VAR ${2:styleColor}: Text; ${3:Validations : Text})",
			"// Para funcionar correctamente necesitamos:",
			"// 1- Propiedad StyleExpr en los campos en los que queremos cambiar el estilo. Ejemplo: StyleExpr = fontStyle (Variable global de página).",
			"// 2- Usa un disparador para llamar a nuestra función a la cual pasaremos como la variable global que asignamos a la propiedad StyleExpr.",
			"// 3- Modifica el parámetro \"Validación\", el caso y los colores que queremos usar.",
			"begin",
				"\tcase ${4:Validations} of",
					"\t\t'Soft Red':",
						"\t\t\t${2:styleColor}:= 'Attention';",
					"\t\t'Soft blue':",
						"\t\t\t${2:styleColor} := 'AttentionAccent';",
					"\t\t'Soft gray':",
						"\t\t\t${2:styleColor} := 'Subordinate';",
					"\t\t'Standard Black':",
						"\t\t\t${2:styleColor} := 'Standard';",
					"\t\t'Standard Blue':",
						"\t\t\t${2:styleColor} := 'StandardAccent';",
					"\t\t'Strong Black':",
						"\t\t\t${2:styleColor} := 'Strong';",
					"\t\t'Strong Blue':",
						"\t\t\t${2:styleColor} := 'StrongAccent';",
					"\t\t'Red strong':",
						"\t\t\t${2:styleColor} := 'Unfavorable';",
					"\t\t'Green':",
						"\t\t\t${2:styleColor}:= 'Favorable';",
					"\t\t'Yellow':",
						"\t\t\t${2:styleColor} := 'Ambiguous';",  
				"\tend;",
			"end;"
		],
		"description": "Plantilla para cambiar el color de texto en paginas (EAD)"
	}
}