{
    "tgitcambiarorigin": {
		"prefix": "tgit cambiar origin git (EAD)",
		"body": [
			"\\$URL = 'git@github.com:Saycoron/ESTRELLADOS-AL-DEVTOOLS-EAD-.git'\r",
			"\r",
			"git remote set-url origin \\$URL"
		],
		"description": "Cambiar origin git (EAD)"
	} ,
	"tgitactivarssl": {
		"prefix": "tgit activar o desactivar uso de ssl en git (EAD)",
		"body": [
			"# Colocar true o false al final para activar o desactivar el ssl\r",
			"git config --global http.sslVerify "
		],
		"description": "tgit activar o desactivar uso de ssl en git (EAD)"
	},
	"tgitañadirauthsshgithub": {
		"prefix": "tgit añadir auth ssh github (EAD)",
		"body": [
			"#!!!!! Cambiar la terminal a gitbash !!!!!\r",
			"#Crear llave publica y privada\r",
			"# Tenemos que crear llave privada y publica en el ordenador.\r",
			"\r",
			"##### Gitbash/PS \r",
			"# Abrimos la gitbash y en home ejecutamos el siguiente comando dejando las rutas por defecto.\r",
			"ssh-keygen -t rsa -b 4096 -C \"xxx@mail.com\"\r",
			"\r",
			"# Buscamos dentro de la carpeta de nuestro usuario una carpeta oculta llamada .ssh.\r",
			"# Ahi se creo tanto la llave publica(id_rsa.pub) como la privada(id_rsa).\r",
			"\r",
			"# Evaluamos si es encuentra corriendo el servicio de ssh.\r",
			"eval \\$(ssh-agent -s)\r",
			"\r",
			"# Agregaremos la llave privada a gitbash\r",
			"ssh-add ~/.ssh/id_rsa\r",
			"\r",
			"##### Github \r",
			"# Iremos a settigns añadir sshkey pegamos nuestra llave publica. \r",
			"# Ahora vamos a nuestro repositorio y en el apartado de clone or download hacemos click sobre ssh\r",
			"# Copiaremos la url ssh.\r",
			"\r",
			"##### Gitbash/PS\r",
			"# Remplazar origin http por remote ssh en el repo de git",
			"\\$URL = 'git@github.com:Saycoron/ESTRELLADOS-AL-DEVTOOLS-EAD-.git'\r",
			"git remote set-url origin \\$URL"
		],
		"description": "Añadir auth ssh github (EAD)"
	},
	"tgitaliasarbolito": {
		"prefix": "tgit añadir alias arbolito (EAD)",
		"body": [
			"#!!!!! Cambiar la terminal a gitbash !!!!!\r",
			"alias arbolito=\"git log --all --graph --decorate --oneline\"",
			"arbolito\r",
			"# \"Q\" para salir"
		],
		"description": "Añadir alias arbolito (EAD)"
	},
	"tgitaliaspersonas": {
		"prefix": "tgit añadir alias personas (EAD)",
		"body": [
			"#!!!!! Cambiar la terminal a gitbash !!!!!\r",
			"alias personas=\"git shortlog -sn --all --no-merges\"",
			"personas"
		],
		"description": "Añadir alias personas para ver el stats la cantidad de commits de cada uno (EAD)"
	},
	"tgitañadiracommitanterior": {
		"prefix": "tgit añadir a commit anterior (EAD)",
		"body": [
			"#!!!!! Cambiar la terminal a gitbash !!!!!\r",
			"Git commit –-amend"
		],
		"description": "Añadir a commit anterior (EAD)"
	},
    "tgitbuscarpalabraengit": {
		"prefix": "tgit buscar palabra en git (EAD)",
		"body": [
			"#!!!!! Cambiar la terminal a gitbash !!!!!\r",
			"\\$Palabra = 'Palabra'\r",
			"# Buscar en repo\r",
			"git grep \\$Palabra \r",
			"# Buscar en repo y mostrar nº linea\r",
			"git grep -n \\$Palabra\r",
			"# Cantidad de veces que se encuentra en cada archivo\r",
			"git grep -c \\$Palabra"
		],
		"description": "Buscar palabra en git (EAD)"
	},
	"tgitverhistvisual": {
		"prefix": "tgit ver historico visual (EAD)",
		"body": [
			"#!!!!! Cambiar la terminal a gitbash !!!!!\r",
			"#Ver historico visual\r",
			"gitk"
		],
		"description": "Ver historico visual (EAD)"
	},
	"tgitCrearAlias": {
		"prefix": "tgit Crear alias para GIT (EAD)",
		"body": [
			"#Alias GIT\r",
			"#!!!!! Cambiar la terminal a gitbash !!!!!\r",
			"git config --global alias.cfg \"config --global -e\"\r",
			"git config --global alias.rank \"shortlog -sn --all --no-merges\"\r",
			"git config --global alias.arbolito \"log --all --graph --decorate --oneline\"\r",
			"git config --global alias.agregar \"commit --amend\"\r",
			"git config --global alias.ultimatag \"describe --tags --abbrev=0\"\r",
			"git config --global alias.top3 \"log --pretty=format:\\\"%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\\\" --decorate -n3 --numstat\"\r",
			"git config --global alias.ls \"log --pretty=format:\\\"%C(yellow)%h\\\\ %ad%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\\\" --decorate --date=short\"\r",
			"git config --global alias.top5de \"log --pretty=oneline -n 5 --author='Antonio Novoa'\""
		],
		"description": "Crear alias para GIT (EAD)"
	},
	"tgitreset": {
		"prefix": "tgit reset rama (EAD)",
		"body": [
			"$idCommitARegresar = '3d6919c924e238faaad8b0ab8506024bf9a71747'\r",
			"#!!!!! Cambiar la terminal a gitbash !!!!!\r",
			"# Vuelve al commit dejando los cambios de los commits que se borraron en working directory\r",
			"git reset --soft $idCommitARegresar\r",
			"\r",
			"# Vuelve al commit eliminando los cambios de los commits posteriores\r",
			"git reset --hard $idCommitARegresar"
		],
		"description": "Reset rama (EAD)"
	},
	"tgitalias": {
		"prefix": "tgit alias git cfg (EAD) ",
		"body": [
			"cfg = config --global -e\r",
			"rank = shortlog -sn --all --no-merges\r",
			"arbolito = log --all --graph --decorate --oneline\r",
			"agregar = commit --amend\r",
			"ultimatag = describe --tags --abbrev=0\r",
			"top3 = log --pretty=format:\\\"%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\\\" --decorate -n3 --numstat\r",
			"ls = log --pretty=format:\\\"%C(yellow)%h\\\\ %ad%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\\\" --decorate --date=short\r",
			"top5mio = log --pretty=oneline -n 5 --author='Antonio Novoa'"
		],
		"description": "Alias git cfg (EAD)"
    },
    "tgitignore": {
		"prefix": "tgit gitignore (EAD)",
		"body": [
			"#ignoramos todos los compilados y simbolos \r",
			"\r",
			"*.app \r",
			"*/.alpackages/*.app \r",
			"*/.vscode/launch.json \r",
			"\r",
			"#ignoramos rapid implementation \r",
			"*/.vscode/rad.json \r",
			"\r",
			"#ignoramos traducciones \r",
			"*/Translations/*.g.xlf \r",
			"*/Translations/*.es-ES.xlf \r",
			"*/Translations/*.en-EN.xlf \r",
			"*/*.app \r",
			"\r",
			"#ignoramos metadatos AL Object Designer \r",
			"*/.alcache/*.json \r",
			"*/.altemplates/*.json"
		],
		"description": "Gitignore (EAD)"
	}
}