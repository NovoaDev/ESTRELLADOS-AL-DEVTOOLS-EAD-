{
    "ttemplateenviarmail": {
		"prefix": "ttemplate enviar mail (EAD)",
		"body": [
			"    local procedure SendMail(SenderName: Text; SenderAddress: Text; Recipients: List of [Text]; Subject: Text; Body: Text)\r",
			"    var\r",
			"        SMTPMail: Codeunit \"SMTP Mail\";\r",
			"    begin\r",
			"        SMTPMail.CreateMessage(SenderName, SenderAddress, Recipients, Subject, Body);\r",
			"        SMTPMail.Send();\r",
			"    end;"
		],
		"description": "Procedimiento para enviar email (EAD)"
    },
    "ttemplateexternalsql": {
		"prefix": "ttemplate external sql mapear db externa (EAD)",
		"body": [
			"/*\r",
			"NOTA: Para trabajar con external SQL tendremos que seguir estos pasos:\r",
			"1 - Agregar al app.json la llave \"target\": \"OnPrem\"\r",
			"2 - Crear la tabla que usaremos para mapear y agregarle las siguientes propiedades:\r",
			"    - Tabletype = ExternalSQL.\r",
			"    - External = Nombre de la db en SQL.\r",
			"    - ExternalSchema = 'dbo' o el esquema de nuestra DB.\r",
			"3 - Crearemos cada uno de los campos que maperaremos con un tipo de dato parecido al que tienen los campos de nuestra DB en SQL y indicaremos las siguientes propiedades:\r",
			"    - ExternalNme = Nombre del campo en la tabla de SQL.\r",
			"    - SqlDataType = Tipo de dato del campo en la tabla SQL, Ejmp: Varchar.\r",
			"4 - Crearemos una pagina indicando en sourcetable la tabla que creamos anteriormente, mostrando todos sus campos.\r",
			"5 - En el trigger onInit llamaremos a la funcion de la codeunit que crearemos a continuacion:\r",
			"*/\r",
			"codeunit 50101 \"Connect SQL Veh\"\r",
			"{\r",
			"    trigger OnRun()\r",
			"    begin\r",
			"        ConnectToSql();\r",
			"    end;\r",
			"\r",
			"    local procedure ConnectToSql()\r",
			"    var\r",
			"        DatabaseName: Text[50];\r",
			"        DatabaseConnectionString: Text;\r",
			"    begin\r",
			"        DatabaseName := 'NombreDeLaBDSQL';\r",
			"\r",
			"        IF HasTableConnection(TableConnectionType::ExternalSQL, DatabaseName) then\r",
			"            UnregisterTableConnection(TableConnectionType::ExternalSQL, DatabaseName);\r",
			"\r",
			"        //DOCKER\r",
			"        //DB Express Interna\r",
			"        DatabaseConnectionString := 'Data Source=FORMACION1\\SQLEXPRESS;Initial Catalog=' + DatabaseName + ';Integrated Security=SSPI;';\r",
			"\r",
			"        //En instalacion local\r",
			"        //DatabaseConnectionString := 'Data Source=DIII-ANNA\\TEST;Initial Catalog=' + DatabaseName + ';Integrated Security=SSPI;';\r",
			"\r",
			"        RegisterTableConnection(TableConnectionType::ExternalSQL, DatabaseName, DatabaseConnectionString);\r",
			"        SetDefaultTableConnection(TableConnectionType::ExternalSQL, DatabaseName);\r",
			"    end;\r",
			"}\r",
			"\r",
			"/*\r",
			"En caso de fallo podria ser lo siguiente:\r",
			"    - No se encuentra activada las llamadas TCP/IP de la configuracion de SQLServer.\r",
			"    - La instancia solo permite authentificacion Windows.\r",
			"    - El usuario que ejecuta el servicio de BC no es un usuario valido mapeado en la BD SQL (En caso de docker tendremos que mapear \"NT AUTHORITY\\SYSTEM\").\r",
			"    - Las conexiones las realizaremos de la siguiente manera: \r",
			"        Para Desarrollo la DB externa estara dentro del SQL contenedor y mapearemos \"NT AUTHORITY\\SYSTEM\".\r",
			"        Para Pro la DB externa estara en la misma instancia del SQL donde tendremos la DB de Business Central.\r",
			"    NOTA: SI intentamos conectarnos desde un contenedor a una DB externa en otro equipo o en local pero fuera del contenedor con las pruebas que he realizado\r",
			"          no he podido por temas de usuarios dentro del contenedor y SQL a donde me conecto.    \r",
			"*/"
		],
		"description": "Mapear db externa (EAD)"
    },
    "ttemplatepaginawebdentrobccontroladdin": {
		"prefix": "ttemplate pagina web dentro BC controlAddin (EAD)",
		"body": [
			"controladdin \"Page Addin\"\r",
			"{\r",
			"    RequestedHeight = 800;\r",
			"    VerticalStretch = true;\r",
			"    VerticalShrink = true;\r",
			"    HorizontalStretch = true;\r",
			"    HorizontalShrink = true;\r",
			"    Scripts = 'src\\ControllAddin\\page\\page.js';\r",
			"    StyleSheets = 'src\\ControllAddin\\page\\style.css';\r",
			"    StartupScript = 'src\\ControllAddin\\page\\start.js';\r",
			"\r",
			"    event Ready()\r",
			"\r",
			"    procedure embedHomePage()\r",
			"}\r",
			"\r",
			"/* Page.js\r",
			"function createIframe(){\r",
			"    var placeholder = document.getElementById('controlAddIn');\r",
			"    var webPage = document.createElement('iframe');\r",
			"    webPage.id = 'webPage';\r",
			"    webPage.height = '100%';\r",
			"    webPage.width = '100%';\r",
			"    placeholder.appendChild(webPage);\r",
			"}\r",
			"\r",
			"function embedHomePage(){\r",
			"    createIframe();\r",
			"    var webPage = document.getElementById('webPage');\r",
			"    webPage.src = 'https://page.com/';\r",
			"}\r",
			"*/\r",
			"\r",
			"//Start.js\r",
			"//Microsoft.Dynamics.NAV.InvokeExtensibilityMethod('Ready','');\r",
			"\r",
			"//Style.ccs\r",
			"\r",
			"\r",
			"pageextension 50100 \"NUN Customer Card\" extends \"Customer Card\"\r",
			"{\r",
			"    layout\r",
			"    {\r",
			"        addfirst(factboxes)\r",
			"        {\r",
			"            part(PageAddin; \"PageAddin CardPart\")\r",
			"            {\r",
			"                ApplicationArea = All;\r",
			"            }\r",
			"        }\r",
			"    }\r",
			"}\r",
			"\r",
			"\r",
			"page 50100 \"PageAddin CardPart\"\r",
			"{\r",
			"    Caption = 'Page';\r",
			"    PageType = CardPart;\r",
			"    ApplicationArea = All;\r",
			"    UsageCategory = Administration;\r",
			"\r",
			"    layout\r",
			"    {\r",
			"        area(Content)\r",
			"        {\r",
			"            usercontrol(PageAdd; \"Page Addin\")\r",
			"            {\r",
			"                ApplicationArea = All;\r",
			"\r",
			"                trigger Ready()\r",
			"                begin\r",
			"                    CurrPage.PageAdd.embedHomePage();\r",
			"                end;\r",
			"            }\r",
			"        }\r",
			"    }\r",
			"}"
		],
		"description": "Pagina web dentro BC controlAddin (EAD)"
    },
    "ttemplatenotification": {
        "prefix": "ttemplate notification (EAD)",
        "body": [
			" local procedure ShowNotifications(id: Guid)\r",
			"    var\r",
			"        MyNotifications: Record \"My Notifications\";\r",
			"        TheNotification: Notification;\r",
			"        MessageTextLbl: label 'Texto Notificacion', comment = 'ESP=\"Texto Notificacion\"';\r",
			"    begin\r",
			"        //Insertar registro en la tabla mi notifications mostrandola por defecto\r",
			"        if NOT MyNotifications.Get(UserId(), Id) then\r",
			"            MyNotifications.InsertDefault(Id, 'NombreMiNotificacion', 'DescripcionMiNotificacion', true);\r",
			"\r",
			"        if MyNotifications.Get(UserId(), Id) then\r",
			"            if MyNotifications.Enabled then\r",
			"                if Validations() then begin\r",
			"                    TheNotification.Id := id;\r",
			"                    TheNotification.Message := MessageTextLbl;\r",
			"                    TheNotification.Scope := TheNotification.Scope::LocalScope;\r",
			"                    TheNotification.SetData('Campo', '1');\r",
			"                    TheNotification.SetData('Campo2', '110');\r",
			"                    TheNotification.AddAction('CaptionAccion1', Codeunit::\"NUN4 General\", 'PaginaClienteFiltrado');\r",
			"                    TheNotification.AddAction('CaptionAccion2', Codeunit::\"NUN4 General\", 'DisableNotification');\r",
			"                    TheNotification.Send();\r",
			"                end;\r",
			"    end;\r",
			"\r",
			"    local procedure Validations(): Boolean\r",
			"    var\r",
			"        Cust: Record Customer;\r",
			"    begin\r",
			"        Cust.SetRange(\"Phone No.\", '');\r",
			"        if not Cust.IsEmpty() then\r",
			"            exit(true);\r",
			"    end;\r",
			"\r",
			"    procedure Accion1(TheNotification: Notification)\r",
			"    var\r",
			"        Cust: Record Customer;\r",
			"        iTemp: Integer;\r",
			"        iTemp2: Integer;\r",
			"        iTempFinal: Integer;\r",
			"    begin\r",
			"        //OBtener parametros\r",
			"        Evaluate(iTemp, TheNotification.GetData('Campo'));\r",
			"        Evaluate(iTemp2, TheNotification.GetData('Campo2'));\r",
			"        iTempFinal := iTemp + iTemp2;\r",
			"        message(Format(iTempFinal));\r",
			"        //OBtener parametros \r",
			"       \r",
			"        Cust.SetRange(\"Phone No.\", '');\r",
			"        page.RunModal(Page::\"Customer List\", Cust);\r",
			"    end;\r",
			"\r",
			"    procedure DisableNotification(TheNotification: Notification)\r",
			"    var\r",
			"        MyNotifications: Record \"My Notifications\";\r",
			"    begin\r",
			"        if MyNotifications.Get(UserId(), TheNotification.Id) then begin\r",
			"            MyNotifications.Validate(Enabled, false);\r",
			"            MyNotifications.Modify();\r",
			"        end\r",
			"    end;"
        ],
        "description": "Snippet para crear notificaciones no exclusiva para el usuario (EAD)"
   }
}