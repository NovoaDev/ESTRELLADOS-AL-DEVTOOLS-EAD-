{
    "twsapiapiinsertmodify": {
		"prefix": "twsapi API insert/modify (EAD)",
		"body": [
			"    trigger OnInsertRecord(BelowxRec: Boolean): Boolean",
			"    begin",
			"        Insert(true);",
			"        Modify(true);",
			"        exit(false);",
			"    end;",
			"",
			"    trigger OnModifyRecord(): Boolean",
			"    var",
			"        AppHistory: Record \"RIE Hist\";",
			"    begin",
			"        AppHistory.SETRANGE(Id, Id);",
			"        if AppHistory.FINDFIRST() then",
			"            IF Mov <> AppHistory.Mov THEN BEGIN",
			"                AppHistory.TRANSFERFIELDS(Rec, FALSE);",
			"                AppHistory.RENAME(Mov);",
			"                TRANSFERFIELDS(AppHistory);",
			"            end;",
			"    end;"
		],
		"description": "API insert/modify (EAD)"
    },
    "twsapiboundaction": {
		"prefix": "twsapi bound action para paginas WS (EAD)",
		"body": [
			"    // Colocar en page\r",
			"    // Accion asociada a una entidad sin parametro ni retorno. \r",
			"    [ServiceEnabled]\r",
			"    procedure ClonarCliente(var ActionContext: WebServiceActionContext)\r",
			"    var\r",
			"        EADParaacciones: Codeunit \"EAD Para acciones\";\r",
			"    begin\r",
			"        EADParaacciones.ClonarCust(Rec.\"No.\");\r",
			"        ActionContext.SetObjectType(ObjectType::Page);\r",
			"        ActionContext.SetObjectId(Page::\"EAD Page WS\");\r",
			"        ActionContext.AddEntityKey(Rec.FieldNo(\"No.\"), Rec.\"No.\");\r",
			"        ActionContext.SetResultCode(WebServiceActionResultCode::Created);\r",
			"    end;\r",
			"\r",
			"    // Accion asociada a una entidad con parametro y retorno. \r",
			"    [ServiceEnabled]\r",
			"    procedure ClonarClienteConParametroYRetorno(nombre: Text[100]): code[20]\r",
			"    var\r",
			"        NUNParaacciones: Codeunit \"EAD Para acciones\";\r",
			"        ActionContext: WebServiceActionContext;\r",
			"    begin\r",
			"        ActionContext.SetObjectType(ObjectType::Page);\r",
			"        ActionContext.SetObjectId(Page::\"EAD Page WS\");\r",
			"        ActionContext.AddEntityKey(Rec.FieldNo(\"No.\"), Rec.\"No.\");\r",
			"        ActionContext.SetResultCode(WebServiceActionResultCode::Get);\r",
			"        exit(EADParaacciones.ClonarCust(Rec.\"No.\", nombre));\r",
			"    end;"
		],
		"description": "Bound action para paginas WS (EAD)"
    },
	"twsapitrabajarjsonanidados": {
		"prefix": "twsapi trabajar json anidados (EAD)",
		"body": [
			"  /*Ejemplo Imaginando si es un Json Anidado\r",
			"    { \r",
			"        status: “Status”,\r",
			"        info: “INFO”,\r",
			"        details: {\r",
			"            info: “INFO2”,\r",
			"            details: “Details2”\r",
			"        },\r",
			"        freemail: “true”\r",
			"    }\r",
			"    */\r",
			"    procedure PopulateJsonEjemplo(JsonText: Text[2048]): Boolean\r",
			"    var\r",
			"        ResponseMessage: HttpResponseMessage;\r",
			"        JsonObj: JsonObject;\r",
			"        JsonObjAnidado: JsonObject;\r",
			"        ResultStatus: Integer;\r",
			"        ResultInfo: Text;\r",
			"        ResultInfo2: Text;\r",
			"        ResultDetails: Text;\r",
			"        Freemail: Boolean;\r",
			"    begin\r",
			"        // Las variables ResultStatus, ResultInfo, ResultInfo2, ResultDetails y Freemail. Se supone que seran campos de tabla donde se encuentre esta funcion \r",
			"        ResponseMessage.Content().ReadAs(JsonText);\r",
			"        // Primero obtendria los valores de los tokens que estan en el primer nivel\r",
			"        ResultStatus := GetJsonValue(JsonObj, 'status').AsInteger();\r",
			"        ResultInfo := GetJsonValue(JsonObj, 'info').AsText();\r",
			"        Freemail := GetJsonValue(JsonObj, 'freemail').AsBoolean();\r",
			"\r",
			"        // Posicionaria el objeto Json en la llave detail\r",
			"        JsonObjAnidado := SelectJsonObject(JsonObj, 'detail');\r",
			"\r",
			"        // Obtendremos los valores de JsonObjAnidado\r",
			"        ResultInfo2 := GetJsonValue(JsonObjAnidado, 'info2').AsText();\r",
			"        ResultDetails := GetJsonValue(JsonObjAnidado, 'detail2').AsText();\r",
			"        // Fin ejemplo Json Anidado\r",
			"\r",
			"        // Aqui un insert\r",
			"    end;\r",
			"\r",
			"    // Los procedimientos podriamos colocarlos en una CU\r",
			"    procedure GetJsonValue(JsonObj: JsonObject; Property: Text): JsonValue\r",
			"    var\r",
			"        JToken: JsonToken;\r",
			"        JsonTokenNotFoundErr: Label 'Could not find JsonToken %1', Comment = 'ESP=\"No puedo encontrar JsonToken %1\"';\r",
			"        JsonTokenIsNotValueErr: Label 'The Json object is malformed. Could not find Json value %1',\r",
			"                                    Comment = 'ESP=\"El objeto Json está mal formado. No puedo encontrar el valor Json %1\"';\r",
			"    begin\r",
			"        if not JsonObj.Get(Property, JToken) then\r",
			"            Error(JsonTokenNotFoundErr, Property);\r",
			"\r",
			"        if not JToken.IsValue() then\r",
			"            Error(JsonTokenIsNotValueErr, Property);\r",
			"\r",
			"        exit(JToken.AsValue());\r",
			"    end;\r",
			"\r",
			"    procedure SelectJsonObject(JsonObj: JsonObject; Path: Text): JsonObject\r",
			"    var\r",
			"        JToken: JsonToken;\r",
			"        JsonTokenNotFoundErr: Label 'Could not find JsonToken %1', Comment = 'ESP=\"No puedo encontrar JsonToken %1\"';\r",
			"        JsonTokenIsNotObjectErr: Label 'The Json object is malformed. Could not find Json object %1',\r",
			"                            Comment = 'ESP=\"El objeto Json está mal formado. No puedo encontrar el objeto Json %1\"';\r",
			"    begin\r",
			"        if not JsonObj.SelectToken(Path, JToken) then\r",
			"            Error(JsonTokenNotFoundErr, Path);\r",
			"\r",
			"        if not JToken.IsObject() then\r",
			"            Error(JsonTokenIsNotObjectErr, Path);\r",
			"\r",
			"        exit(JToken.AsObject());\r",
			"    end;"
		],
		"description": "Trabajar json anidados (EAD)"
	}
}