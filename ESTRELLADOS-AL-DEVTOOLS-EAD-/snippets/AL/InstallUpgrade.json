{
    "tinstallupgradetags": {
		"prefix": "tinstall Upgrade tags/gestionar CU de upgrade (EAD)",
		"body": [
			"    local procedure UpgradeFeature()",
			"    var",
			"        UpgradeTag: Codeunit \"Upgrade Tag\";",
			"        // Tendremos que crear una etiqueta, podriamos hacerlo en una nueva codeunit que tenga un procedimiento que retorne cada una de las etiquetas existentes y hacer la validacion",
			"        // De cada una de ellas.",
			"        UpgradeTagEjemplo1: Code[250];",
			"        UpgradeTagEjemplo2: Code[250];",
			"    begin",
			"        // ---- Estructura de la etiqueta ----",
			"        // 3 primeras letras de prefijo-GUID-Descripcion-DDMMYYYY",
			"        UpgradeTagEjemplo1 := 'EAD-4273499ef4934924a86d6d61f1a77263-FixCustomer-08052020';",
			"        UpgradeTagEjemplo2 := 'EAD-5b9182c4586542a78969321a902603a7-FixVendor-09052020';",
			"",
			"        // Valida si tiene la ultima etiqueta, en mi caso es upgradeTagEjemplo2 si la tiene sale, se entiende que al tener esta no necesita validar otras mas antiguas.",
			"        if UpgradeTag.HasUpgradeTag(UpgradeTagEjemplo2) then",
			"            exit",
			"        else",
			"            Message('Lanzar proceso Vendor');",
			"",
			"        if NOT UpgradeTag.HasUpgradeTag(UpgradeTagEjemplo1) then",
			"            Message('Lanzar proceso Customer');",
			"",
			"        // Tag de ultima version",
			"        UpgradeTag.SetUpgradeTag(UpgradeTagEjemplo2);",
			"    end;",
			""
		],
		"description": "Procedure para gestionar gestionar CU de upgrade mediante upgrade tags (EAD)"
    },
    "tinstallUpgradetags2": {
		"prefix": "tinstall Upgrade tags/gestionar CU de upgrade Ampliada (EAD)",
		"body": [
			"codeunit 50116 \"EAD UpgradeCodeunit\"",
			"{",
			"    Subtype = Upgrade;",
			"",
			"    trigger OnUpgradePerCompany()",
			"    begin",
			"        UpgradeFeature();",
			"    end;",
			"",
			"    local procedure UpgradeFeature()",
			"    var",
			"        UpgradeTag: Codeunit \"Upgrade Tag\";",
			"        UpgradeTag: Codeunit \"EAD Upgrade tags\";",
			"    begin",
			"        if UpgradeTag.HasUpgradeTag(UpgradeTag.GetUpgradeTagEjemplo2()) then",
			"            exit;",
			"",
			"        if NOT UpgradeTag.HasUpgradeTag(UpgradeTag.GetUpgradeTagEjemplo1()) then begin",
			"            RunUpgradeEjemplo1();",
			"            UpgradeTag.SetUpgradeTag(UpgradeTag.GetUpgradeTagEjemplo1());",
			"        end;",
			"",
			"        RunUpgradeEjemplo2();",
			"        UpgradeTag.SetUpgradeTag(UpgradeTag.GetUpgradeTagEjemplo2());",
			"    end;",
			"",
			"    local procedure RunUpgradeEjemplo1()",
			"    begin",
			"    end;",
			"",
			"    local procedure RunUpgradeEjemplo2()",
			"    var",
			"    begin",
			"    end;",
			"}",
			"",
			"codeunit 50117 \"EAD Upgrade tags\"",
			"{",
			"    [EventSubscriber(ObjectType::Codeunit, Codeunit::\"Upgrade Tag\", 'OnGetPerCompanyUpgradeTags', '', false, false)]",
			"    local procedure RegisterPerCompanyTags(var PerCompanyUpgradeTags: List of [Code[250]])",
			"    begin",
			"        PerCompanyUpgradeTags.Add(GetUpgradeTagEjemplo1);",
			"        PerCompanyUpgradeTags.Add(GetUpgradeTagEjemplo2);",
			"    end;",
			"",
			"    [EventSubscriber(ObjectType::Codeunit, Codeunit::\"Upgrade Tag\", 'OnGetPerDatabaseUpgradeTags', '', false, false)]",
			"    local procedure RegisterPerDatabaseTags(var PerDatabaseUpgradeTags: List of [Code[250]])",
			"    begin",
			"        PerDatabaseUpgradeTags.Add(GetUpgradeTagPerDB);",
			"    end;",
			"",
			"    procedure GetUpgradeTagEjemplo1(): code[250]",
			"    begin",
			"        exit('EAD-427349-FixCustomer-08052020')",
			"    end;",
			"",
			"    procedure GetUpgradeTagEjemplo2(): code[250]",
			"    begin",
			"        exit('EAD-5b9182-FixVendor-09052020')",
			"    end;",
			"",
			"    procedure GetUpgradeTagPerDB(): code[250]",
			"    begin",
			"        exit('EAD-5b2282-PerData-10052020')",
			"    end;",
			"}"
		],
		"description": "Upgrade tags/gestionar CU de upgrade Ampliada (EAD)"
	}
}