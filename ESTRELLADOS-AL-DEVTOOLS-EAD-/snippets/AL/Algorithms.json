{
	"talgobubblesort": {
		"prefix": "talgo ordenamiento bubbleSort (existen mejores algoritmos) (EAD)",
		"body": [
			"procedure bubbleSort(var arry: array[10] of Decimal)\r",
			"    var\r",
			"        i: Integer;\r",
			"        iTemp: Integer;\r",
			"    begin\r",
			"        for i := 1 to ArrayLen(arry) - 1 do\r",
			"            for iTemp := 1 to ArrayLen(arry) - 1 do\r",
			"                if arry[iTemp] > arry[iTemp + 1] then\r",
			"                    changePos(arry[iTemp], arry[iTemp + 1]);\r",
			"    end;\r",
			"\r",
			"    local procedure changePos(var Pos: Decimal; var Pos2: Decimal)\r",
			"    var\r",
			"        xPos: Decimal;\r",
			"    begin\r",
			"        xPos := Pos;\r",
			"        Pos := Pos2;\r",
			"        Pos2 := xPos;\r",
			"    end;"
		],
		"description": "Algoritmo de ordenamiento bubbleSort(existen mejores algoritmos)(EAD)"
	},
	"talgoInsertionsort": {
		"prefix": "talgo ordenamiento InsertionSort (existen mejores algoritmos) (EAD)",
		"body": [
			"    local procedure InsertionSort(var arry: array[10] of Decimal)\r",
			"    var\r",
			"        i: Integer;\r",
			"        iTemp: Integer;\r",
			"        currentVal: Decimal;\r",
			"        mustGoOut: Boolean;\r",
			"    begin\r",
			"        for i := 2 to ArrayLen(arry) do begin\r",
			"            currentVal := arry[i];\r",
			"            iTemp := i - 1;\r",
			"            mustGoOut := false;\r",
			"\r",
			"            while NOT mustGoOut do\r",
			"                if iTemp > 0 then begin\r",
			"                    if arry[iTemp] > currentVal then begin\r",
			"                        arry[iTemp + 1] := arry[iTemp];\r",
			"                        iTemp -= 1;\r",
			"                    end else\r",
			"                        mustGoOut := true;\r",
			"                end else\r",
			"                    mustGoOut := true;\r",
			"\r",
			"            arry[iTemp + 1] := currentVal;\r",
			"        end;\r",
			"    end;"
		],
		"description": "Algoritmo de ordenamiento InsertionSort(existen mejores algoritmos)(EAD)"
	},
	"talgoquicksort": {
		"prefix": "talgo ordenamiento QuickSort (EAD)",
		"body": [
			"    procedure sort(var arry: array[10] of Decimal)\r",
			"    begin\r",
			"        sort(arry, 1, ArrayLen(arry));\r",
			"    end;\r",
			"\r",
			"    local procedure sort(var arry: array[10] of Decimal; izq: Integer; der: Integer)\r",
			"    var\r",
			"        pivot: Decimal;\r",
			"        i: Integer;\r",
			"        j: Integer;\r",
			"    begin\r",
			"        pivot := arry[izq];\r",
			"        i := izq;\r",
			"        j := der;\r",
			"        while i < j do begin\r",
			"            while (arry[i] <= pivot) and (i < j) do\r",
			"                i += 1;\r",
			"            while arry[j] > pivot do j -= 1;\r",
			"            if (i < j) then intercambio(arry, i, j);\r",
			"        end;\r",
			"\r",
			"        arry[izq] := arry[j];\r",
			"        arry[j] := pivot;\r",
			"\r",
			"        if izq < j - 1 then\r",
			"            sort(arry, izq, j - 1);\r",
			"\r",
			"        if j + 1 < der then\r",
			"            sort(arry, j + 1, der);\r",
			"    end;\r",
			"\r",
			"    local procedure reverseSort(var arry: array[10] of Decimal)\r",
			"    begin\r",
			"        reverseSort(arry, 0, ArrayLen(arry) - 1);\r",
			"    end;\r",
			"\r",
			"    local procedure reverseSort(var arry: array[10] of Decimal; izq: Integer; der: Integer)\r",
			"    var\r",
			"        pivot: Decimal;\r",
			"        i: Integer;\r",
			"        j: Integer;\r",
			"    begin\r",
			"        pivot := arry[izq];\r",
			"        i := izq;\r",
			"        j := der;\r",
			"        while i < j do begin\r",
			"            while (arry[i] >= pivot) and (i < j) do\r",
			"                i += 1;\r",
			"\r",
			"            while arry[j] < pivot do j -= 1;\r",
			"\r",
			"            if i < j then\r",
			"                intercambio(arry, i, j);\r",
			"\r",
			"        end;\r",
			"        arry[izq] := arry[j];\r",
			"        arry[j] := pivot;\r",
			"        if (izq < j - 1) then\r",
			"            reverseSort(arry, izq, j - 1);\r",
			"\r",
			"        if (j + 1 < der) then\r",
			"            reverseSort(arry, j + 1, der);\r",
			"    end;\r",
			"\r",
			"    local procedure intercambio(var arry: array[10] of Decimal; i: Integer; j: Integer)\r",
			"    var\r",
			"        aux: Decimal;\r",
			"    begin\r",
			"        aux := arry[j];\r",
			"        arry[j] := arry[i];\r",
			"        arry[i] := aux;\r",
			"    end;"
		],
		"description": "talgo ordenamiento QuickSort (EAD)"
	},
	"talgococktailsort": {
		"prefix": "talgo ordenamiento cocktailSort (EAD)",
		"body": [
			"    procedure cocktailSort(var arry: array[10] of Decimal)\r",
			"    var\r",
			"        hasChanged: Boolean;\r",
			"        i: Integer;\r",
			"    begin\r",
			"        repeat\r",
			"            hasChanged := false;\r",
			"            for i := 1 to ArrayLen(arry) - 1 do\r",
			"                if (arry[i] > arry[i + 1]) then begin\r",
			"                    swap(arry, i, i + 1);\r",
			"                    hasChanged := true;\r",
			"                end;\r",
			"\r",
			"            if NOT hasChanged then break;\r",
			"\r",
			"            for i := ArrayLen(arry) - 1 DOWNTO 1 do\r",
			"                if (arry[i] > arry[i + 1]) then begin\r",
			"                    swap(arry, i, i + 1);\r",
			"                    hasChanged := true;\r",
			"                end;\r",
			"        until hasChanged;\r",
			"    end;\r",
			"\r",
			"    local procedure reverseSort(var arry: array[10] of Decimal)\r",
			"    var\r",
			"        hasChanged: Boolean;\r",
			"        i: Integer;\r",
			"    begin\r",
			"        repeat\r",
			"            hasChanged := false;\r",
			"            for i := 1 to ArrayLen(arry) - 1 do\r",
			"                if (arry[i] < arry[i + 1]) then begin\r",
			"                    swap(arry, i, i + 1);\r",
			"                    hasChanged := true;\r",
			"                end;\r",
			"\r",
			"            if NOT hasChanged then break;\r",
			"\r",
			"            for i := ArrayLen(arry) - 1 DOWNTO 1 do\r",
			"                if (arry[i] < arry[i + 1]) then begin\r",
			"                    swap(arry, i, i + 1);\r",
			"                    hasChanged := true;\r",
			"                end;\r",
			"        until hasChanged;\r",
			"    end;\r",
			"\r",
			"    local procedure swap(var arry: array[10] of Decimal; i: Integer; j: Integer)\r",
			"    var\r",
			"        aux: Decimal;\r",
			"    begin\r",
			"        aux := arry[j];\r",
			"        arry[j] := arry[i];\r",
			"        arry[i] := aux;\r",
			"    end;"
		],
		"description": "talgo ordenamiento cocktailSort (EAD)"
	},
	"talgorecursividad": {
		"prefix": "talgo recursividad/factorial (EAD)",
		"body": [
			"    local procedure factorial(n: Integer): Integer\r",
			"    begin\r",
			"        //Recursividad - EJMP: 10 = 3628800\r",
			"        if (n = 0) then\r",
			"            exit(1);\r",
			"\r",
			"        exit(n * factorial(n - 1));\r",
			"        //Recursividad\r",
			"    end;"
		],
		"description": "talgo recursividad/factorial (EAD)"
	}
}