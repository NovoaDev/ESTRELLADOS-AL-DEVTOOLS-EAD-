{
	"tutildivisible": {
		"prefix": "tutil numero es divisible (EAD)",
		"body": [
			"    procedure itsDivisibleBy(number: integer; multiple: Integer): Boolean\r",
			"    var\r",
			"        moduleOP: Integer;\r",
			"    begin\r",
			"        moduleOP := number MOD multiple;\r",
			"        if moduleOP = 0 then\r",
			"            exit(true);\r",
			"    end;"
		],
		"description": "Muestra si un numero es multiplo de otro (EAD)"
	},
	"tutilenviarmail": {
		"prefix": "tutil enviar mail (EAD)",
		"body": [
			"    local procedure SendMail(SenderName: Text; SenderAddress: Text; Recipients: List of [Text]; Subject: Text; Body: Text)\r",
			"    var\r",
			"        SMTPMail: Codeunit \"SMTP Mail\";\r",
			"    begin\r",
			"        SMTPMail.CreateMessage(SenderName, SenderAddress, Recipients, Subject, Body);\r",
			"        SMTPMail.Send();\r",
			"    end;"
		],
		"description": "Procedimiento para enviar email (EAD)"
	},
	"tutilcambiarinforme": {
		"prefix": "tutil reemplazar informe (EAD)",
		"body": [
			"    [EventSubscriber(ObjectType::Codeunit, Codeunit::ReportManagement, 'OnAfterSubstituteReport', '', false, false)]\r",
			"    local procedure OnSubstituteReport(ReportId: Integer; var NewReportId: Integer)\r",
			"    begin\r",
			"        if ReportId = Report::${1:\"Customer - List\"} then\r",
			"            NewReportId := Report::${2:\"Sales - Invoice\"};\r",
			"    end;"
		],
		"description": "Suscripción a un evento para remplazar report (EAD)"
	},
	"tutilapiinsertmodify": {
		"prefix": "tutil API insert/modify (EAD)",
		"body": [
			"    trigger OnInsertRecord(BelowxRec: Boolean): Boolean",
			"    begin",
			"        Insert(true);",
			"        Modify(true);",
			"        exit(false);",
			"    end;",
			"",
			"    trigger OnModifyRecord(): Boolean",
			"    var",
			"        AppHistory: Record \"RIE Hist\";",
			"    begin",
			"        AppHistory.SETRANGE(Id, Id);",
			"        if AppHistory.FINDFIRST() then",
			"            IF Mov <> AppHistory.Mov THEN BEGIN",
			"                AppHistory.TRANSFERFIELDS(Rec, FALSE);",
			"                AppHistory.RENAME(Mov);",
			"                TRANSFERFIELDS(AppHistory);",
			"            end;",
			"    end;"
		],
		"description": "API insert/modify (EAD)"
	},
	"tutilaccioncargarblob": {
		"prefix": "tutil accion cargar blob (EAD)",
		"body": [
			"        action(\"UploadFile\")\r",
			"        {\r",
			"           Caption = 'Upload', comment = 'ESP=\"Actualizar\"';\r",
			"           ToolTip = 'Action to upload image', comment = 'ESP=\"Accion para subir imagen\"';\r",
			"\r",
			"           ApplicationArea = All;\r",
			"           Image = LaunchWeb;\r",
			"           Promoted = true;\r",
			"           PromotedCategory = Process;\r",
			"           PromotedIsBig = true;\r",
			"           PromotedOnly = true;\r",
			"\r",
			"           trigger OnAction()\r",
			"           var\r",
			"               InStr: InStream;\r",
			"               FileName: Text;\r",
			"           begin\r",
			"               UploadIntoStream('Upload', '', '', FileName, InStr);\r",
			"              \"Campo\".ImportStream(InStr, FileName);\r",
			"           end;\r",
			"        }"
		],
		"description": "Accion cargar blob (EAD)"
	},
	"tutiloverflowtexto": {
		"prefix": "tutil overflow en campos texto (EAD)",
		"body": [
			"Tabla.Campo := copyStr(Variable, 1, maxstrlen(Tabla.Campo));"
		],
		"description": "Overflow en campos texto (EAD)"
	},
	"tutillancodereport": {
		"prefix": "tutil cambiar idioma en report (EAD)",
		"body": [
			"lanCode := 'ENU'; //Para test se usa una variable\r",
			"//Si lanCode no existe en la tabla language o esta en blanco usa el lenguaje del S.O.\r",
			"CurrReport.LANGUAGE := Language.GetLanguageID(lanCode);"
		],
		"description": "Cambiar idioma en report (EAD)"
	},
	"tutilformatmesreport": {
		"prefix": "tutil format mes report (EAD)",
		"body": [
			"local procedure FormatMes(Mes : Integer) : Text\r",
			"var\r",
			"    EneLbl: Label 'January', comment = 'ESP=\"Enero\"';\r",
			"    FebLbl: Label 'February', comment = 'ESP=\"Febrero\"';\r",
			"    MarLbl: Label 'March', comment = 'ESP=\"Marzo\"';\r",
			"    AbrLbl: Label 'April', comment = 'ESP=\"Abril\"';\r",
			"    MayLbl: Label 'May', comment = 'ESP=\"Mayo\"';\r",
			"    JunLbl: Label 'June', comment = 'ESP=\"Junio\"';\r",
			"    JulLbl: Label 'July', comment = 'ESP=\"Julio\"';\r",
			"    AgoLbl: Label 'August', comment = 'ESP=\"Agosto\"';\r",
			"    SepLbl: Label 'September', comment = 'ESP=\"Septiembre\"';\r",
			"    OctLbl: Label 'October', comment = 'ESP=\"Octubre\"';\r",
			"    NovLbl: Label 'November', comment = 'ESP=\"Noviembre\"';\r",
			"    DicLbl: Label 'December', comment = 'ESP=\"Diciembre\"';\r",
			"begin\r",
			"    CASE Mes OF\r",
			"        1:\r",
			"        MesText := EneLbl;\r",
			"        2:\r",
			"        MesText := FebLbl;\r",
			"        3:\r",
			"        MesText := MarLbl;\r",
			"        4:\r",
			"        MesText := AbrLbl;\r",
			"        5:\r",
			"        MesText := MayLbl;\r",
			"        6:\r",
			"        MesText := JunLbl;\r",
			"        7:\r",
			"        MesText := JulLbl;\r",
			"        8:\r",
			"        MesText := AgoLbl;\r",
			"        9:\r",
			"        MesText := SepLbl;\r",
			"        10:\r",
			"        MesText := OctLbl;\r",
			"        11:\r",
			"        MesText := NovLbl;\r",
			"        12:\r",
			"        MesText := DicLbl;\r",
			"    END;\r",
			"    EXIT(MesText);\r",
			"end;"
		],
		"description": "Función format mes report (EAD)"
	},
	"tutilchangedatetostring": {
		"prefix": "tutil cambiar fecha a texto (EAD)",
		"body": [
			"    local procedure changeDateToString(originalDate: date) returnDate: Text[11]\r",
			"    var\r",
			"        dayAux: Integer;\r",
			"        monthAux: Integer;\r",
			"    begin\r",
			"        returnDate := '';\r",
			"        //DIA\r",
			"        dayAux := Date2DMY(originalDate, 1);\r",
			"        if dayAux < 10 then\r",
			"            returnDate := '0';\r",
			"        returnDate += Format(dayAux) + '/';\r",
			"        //MES\r",
			"        monthAux := Date2DMY(originalDate, 2);\r",
			"        if monthAux < 10 then\r",
			"            returnDate += '0';\r",
			"        returnDate += Format(monthAux) + '/';\r",
			"        returnDate += Format(Date2DMY(originalDate, 3));\r",
			"    end;"
		],
		"description": "Cambiar fecha a texto para reports (EAD)"
	},
	"tutilupgradetags": {
		"prefix": "tutil Upgrade tags/gestionar CU de upgrade (EAD)",
		"body": [
			"    local procedure UpgradeFeature()",
			"    var",
			"        UpgradeTag: Codeunit \"Upgrade Tag\";",
			"        // Tendremos que crear una etiqueta, podriamos hacerlo en una nueva codeunit que tenga un procedimiento que retorne cada una de las etiquetas existentes y hacer la validacion",
			"        // De cada una de ellas.",
			"        UpgradeTagEjemplo1: Code[250];",
			"        UpgradeTagEjemplo2: Code[250];",
			"    begin",
			"        // ---- Estructura de la etiqueta ----",
			"        // 3 primeras letras de prefijo-GUID-Descripcion-DDMMYYYY",
			"        UpgradeTagEjemplo1 := 'EAD-4273499ef4934924a86d6d61f1a77263-FixCustomer-08052020';",
			"        UpgradeTagEjemplo2 := 'EAD-5b9182c4586542a78969321a902603a7-FixVendor-09052020';",
			"",
			"        // Valida si tiene la ultima etiqueta, en mi caso es upgradeTagEjemplo2 si la tiene sale, se entiende que al tener esta no necesita validar otras mas antiguas.",
			"        if UpgradeTag.HasUpgradeTag(UpgradeTagEjemplo2) then",
			"            exit",
			"        else",
			"            Message('Lanzar proceso Vendor');",
			"",
			"        if NOT UpgradeTag.HasUpgradeTag(UpgradeTagEjemplo1) then",
			"            Message('Lanzar proceso Customer');",
			"",
			"        // Tag de ultima version",
			"        UpgradeTag.SetUpgradeTag(UpgradeTagEjemplo2);",
			"    end;",
			""
		],
		"description": "Procedure para gestionar gestionar CU de upgrade mediante upgrade tags (EAD)"
	},
	"tutillanzarreportconfiltroactual(EAD)": {
		"prefix": "tutil lanzar report con filtro de la pagina actual (EAD)",
		"body": [
			"trigger OnAction()\r",
			"var\r",
			"    SalespersonPurchr: Record \"Salesperson/Purchaser\";\r",
			"begin\r",
			"    Clear(SalespersonPurchr);\r",
			"    CurrPage.SETSELECTIONFILTER(SalespersonPurchr);\r",
			"    REPORT.RUNMODAL(report::\"Commissions List\", true, false, SalespersonPurchr);\r",
			"end;"
		],
		"description": "Lanzar report con filtro de la pagina actual (EAD)"
	}
}