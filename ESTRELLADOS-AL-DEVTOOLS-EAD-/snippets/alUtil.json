{
	"tutildivisible": {
		"prefix": "tutil numero es divisible (EAD)",
		"body": [
			"    procedure itsDivisibleBy(number: integer; multiple: Integer): Boolean\r",
			"    var\r",
			"        moduleOP: Integer;\r",
			"    begin\r",
			"        moduleOP := number MOD multiple;\r",
			"        if moduleOP = 0 then\r",
			"            exit(true);\r",
			"    end;"
		],
		"description": "Muestra si un numero es multiplo de otro (EAD)"
	},
	"tutilenviarmail": {
		"prefix": "tutil enviar mail (EAD)",
		"body": [
			"    local procedure SendMail(SenderName: Text; SenderAddress: Text; Recipients: List of [Text]; Subject: Text; Body: Text)\r",
			"    var\r",
			"        SMTPMail: Codeunit \"SMTP Mail\";\r",
			"    begin\r",
			"        SMTPMail.CreateMessage(SenderName, SenderAddress, Recipients, Subject, Body);\r",
			"        SMTPMail.Send();\r",
			"    end;"
		],
		"description": "Procedimiento para enviar email (EAD)"
	},
	"tutilcambiarinforme": {
		"prefix": "tutil reemplazar informe (EAD)",
		"body": [
			"    [EventSubscriber(ObjectType::Codeunit, Codeunit::ReportManagement, 'OnAfterSubstituteReport', '', false, false)]\r",
			"    local procedure OnSubstituteReport(ReportId: Integer; var NewReportId: Integer)\r",
			"    begin\r",
			"        if ReportId = Report::${1:\"Customer - List\"} then\r",
			"            NewReportId := Report::${2:\"Sales - Invoice\"};\r",
			"    end;"
		],
		"description": "Suscripción a un evento para remplazar report (EAD)"
	},
	"tutilapiinsertmodify": {
		"prefix": "tutil API insert/modify (EAD)",
		"body": [
			"    trigger OnInsertRecord(BelowxRec: Boolean): Boolean",
			"    begin",
			"        Insert(true);",
			"        Modify(true);",
			"        exit(false);",
			"    end;",
			"",
			"    trigger OnModifyRecord(): Boolean",
			"    var",
			"        AppHistory: Record \"RIE Hist\";",
			"    begin",
			"        AppHistory.SETRANGE(Id, Id);",
			"        if AppHistory.FINDFIRST() then",
			"            IF Mov <> AppHistory.Mov THEN BEGIN",
			"                AppHistory.TRANSFERFIELDS(Rec, FALSE);",
			"                AppHistory.RENAME(Mov);",
			"                TRANSFERFIELDS(AppHistory);",
			"            end;",
			"    end;"
		],
		"description": "API insert/modify (EAD)"
	},
	"tutilaccioncargarblob": {
		"prefix": "tutil accion cargar blob (EAD)",
		"body": [
			"        action(\"UploadFile\")\r",
			"        {\r",
			"           Caption = 'Upload', comment = 'ESP=\"Actualizar\"';\r",
			"           ToolTip = 'Action to upload image', comment = 'ESP=\"Accion para subir imagen\"';\r",
			"\r",
			"           ApplicationArea = All;\r",
			"           Image = LaunchWeb;\r",
			"           Promoted = true;\r",
			"           PromotedCategory = Process;\r",
			"           PromotedIsBig = true;\r",
			"           PromotedOnly = true;\r",
			"\r",
			"           trigger OnAction()\r",
			"           var\r",
			"               InStr: InStream;\r",
			"               FileName: Text;\r",
			"           begin\r",
			"               UploadIntoStream('Upload', '', '', FileName, InStr);\r",
			"              \"Campo\".ImportStream(InStr, FileName);\r",
			"           end;\r",
			"        }"
		],
		"description": "Accion cargar blob (EAD)"
	},
	"tutiloverflowtexto": {
		"prefix": "tutil overflow en campos texto (EAD)",
		"body": [
			"Tabla.Campo := copyStr(Variable, 1, maxstrlen(Tabla.Campo));"
		],
		"description": "Overflow en campos texto (EAD)"
	},
	"tutillancodereport": {
		"prefix": "tutil cambiar idioma en report (EAD)",
		"body": [
			"lanCode := 'ENU'; //Para test se usa una variable\r",
			"//Si lanCode no existe en la tabla language o esta en blanco usa el lenguaje del S.O.\r",
			"CurrReport.LANGUAGE := Language.GetLanguageID(lanCode);"
		],
		"description": "Cambiar idioma en report (EAD)"
	},
	"tutilformatmesreport": {
		"prefix": "tutil format mes report (EAD)",
		"body": [
			"local procedure FormatMes(Mes : Integer) : Text\r",
			"var\r",
			"    EneLbl: Label 'January', comment = 'ESP=\"Enero\"';\r",
			"    FebLbl: Label 'February', comment = 'ESP=\"Febrero\"';\r",
			"    MarLbl: Label 'March', comment = 'ESP=\"Marzo\"';\r",
			"    AbrLbl: Label 'April', comment = 'ESP=\"Abril\"';\r",
			"    MayLbl: Label 'May', comment = 'ESP=\"Mayo\"';\r",
			"    JunLbl: Label 'June', comment = 'ESP=\"Junio\"';\r",
			"    JulLbl: Label 'July', comment = 'ESP=\"Julio\"';\r",
			"    AgoLbl: Label 'August', comment = 'ESP=\"Agosto\"';\r",
			"    SepLbl: Label 'September', comment = 'ESP=\"Septiembre\"';\r",
			"    OctLbl: Label 'October', comment = 'ESP=\"Octubre\"';\r",
			"    NovLbl: Label 'November', comment = 'ESP=\"Noviembre\"';\r",
			"    DicLbl: Label 'December', comment = 'ESP=\"Diciembre\"';\r",
			"begin\r",
			"    CASE Mes OF\r",
			"        1:\r",
			"        MesText := EneLbl;\r",
			"        2:\r",
			"        MesText := FebLbl;\r",
			"        3:\r",
			"        MesText := MarLbl;\r",
			"        4:\r",
			"        MesText := AbrLbl;\r",
			"        5:\r",
			"        MesText := MayLbl;\r",
			"        6:\r",
			"        MesText := JunLbl;\r",
			"        7:\r",
			"        MesText := JulLbl;\r",
			"        8:\r",
			"        MesText := AgoLbl;\r",
			"        9:\r",
			"        MesText := SepLbl;\r",
			"        10:\r",
			"        MesText := OctLbl;\r",
			"        11:\r",
			"        MesText := NovLbl;\r",
			"        12:\r",
			"        MesText := DicLbl;\r",
			"    END;\r",
			"    EXIT(MesText);\r",
			"end;"
		],
		"description": "Función format mes report (EAD)"
	},
	"tutilchangedatetostring": {
		"prefix": "tutil cambiar fecha a texto (EAD)",
		"body": [
			"    local procedure changeDateToString(originalDate: date) returnDate: Text[11]\r",
			"    var\r",
			"        dayAux: Integer;\r",
			"        monthAux: Integer;\r",
			"    begin\r",
			"        returnDate := '';\r",
			"        //DIA\r",
			"        dayAux := Date2DMY(originalDate, 1);\r",
			"        if dayAux < 10 then\r",
			"            returnDate := '0';\r",
			"        returnDate += Format(dayAux) + '/';\r",
			"        //MES\r",
			"        monthAux := Date2DMY(originalDate, 2);\r",
			"        if monthAux < 10 then\r",
			"            returnDate += '0';\r",
			"        returnDate += Format(monthAux) + '/';\r",
			"        returnDate += Format(Date2DMY(originalDate, 3));\r",
			"    end;"
		],
		"description": "Cambiar fecha a texto para reports (EAD)"
	},
	"tutilupgradetags": {
		"prefix": "tutil Upgrade tags/gestionar CU de upgrade (EAD)",
		"body": [
			"    local procedure UpgradeFeature()",
			"    var",
			"        UpgradeTag: Codeunit \"Upgrade Tag\";",
			"        // Tendremos que crear una etiqueta, podriamos hacerlo en una nueva codeunit que tenga un procedimiento que retorne cada una de las etiquetas existentes y hacer la validacion",
			"        // De cada una de ellas.",
			"        UpgradeTagEjemplo1: Code[250];",
			"        UpgradeTagEjemplo2: Code[250];",
			"    begin",
			"        // ---- Estructura de la etiqueta ----",
			"        // 3 primeras letras de prefijo-GUID-Descripcion-DDMMYYYY",
			"        UpgradeTagEjemplo1 := 'EAD-4273499ef4934924a86d6d61f1a77263-FixCustomer-08052020';",
			"        UpgradeTagEjemplo2 := 'EAD-5b9182c4586542a78969321a902603a7-FixVendor-09052020';",
			"",
			"        // Valida si tiene la ultima etiqueta, en mi caso es upgradeTagEjemplo2 si la tiene sale, se entiende que al tener esta no necesita validar otras mas antiguas.",
			"        if UpgradeTag.HasUpgradeTag(UpgradeTagEjemplo2) then",
			"            exit",
			"        else",
			"            Message('Lanzar proceso Vendor');",
			"",
			"        if NOT UpgradeTag.HasUpgradeTag(UpgradeTagEjemplo1) then",
			"            Message('Lanzar proceso Customer');",
			"",
			"        // Tag de ultima version",
			"        UpgradeTag.SetUpgradeTag(UpgradeTagEjemplo2);",
			"    end;",
			""
		],
		"description": "Procedure para gestionar gestionar CU de upgrade mediante upgrade tags (EAD)"
	},
	"tutillanzarreportconfiltroactual(EAD)": {
		"prefix": "tutil lanzar report con filtro de la pagina actual (EAD)",
		"body": [
			"trigger OnAction()\r",
			"var\r",
			"    SalespersonPurchr: Record \"Salesperson/Purchaser\";\r",
			"begin\r",
			"    Clear(SalespersonPurchr);\r",
			"    CurrPage.SETSELECTIONFILTER(SalespersonPurchr);\r",
			"    REPORT.RUNMODAL(report::\"Commissions List\", true, false, SalespersonPurchr);\r",
			"end;"
		],
		"description": "Lanzar report con filtro de la pagina actual (EAD)"
	},
	"tutilexisteletraen": {
		"prefix": "tutil existe letra en (EAD)",
		"body": [
			"procedure isAValidLetter(Letter: Text[1]): Boolean\r",
			"begin\r",
			"    if Letter in ['8', '9', 'X', 'Y', 'Z'] then\r",
			"        exit(true);\r",
			"end;"
		],
		"description": "Existe letra en (EAD)"
	},	
	"tgitignore": {
		"prefix": "tgitignore (EAD)",
		"body": [
			"#ignoramos todos los compilados y simbolos \r",
			"\r",
			"*.app \r",
			"*/.alpackages/*.app \r",
			"*/.vscode/launch.json \r",
			"\r",
			"#ignoramos rapid implementation \r",
			"*/.vscode/rad.json \r",
			"\r",
			"#ignoramos traducciones \r",
			"*/Translations/*.g.xlf \r",
			"*/Translations/*.es-ES.xlf \r",
			"*/Translations/*.en-EN.xlf \r",
			"*/*.app \r",
			"\r",
			"#ignoramos metadatos AL Object Designer \r",
			"*/.alcache/*.json \r",
			"*/.altemplates/*.json"
		],
		"description": "Gitignore (EAD)"
	},
	"tutilUpgradetags2": {
		"prefix": "tutil Upgrade tags/gestionar CU de upgrade Ampliada (EAD)",
		"body": [
			"codeunit 50116 \"EAD UpgradeCodeunit\"",
			"{",
			"    Subtype = Upgrade;",
			"",
			"    trigger OnUpgradePerCompany()",
			"    begin",
			"        UpgradeFeature();",
			"    end;",
			"",
			"    local procedure UpgradeFeature()",
			"    var",
			"        UpgradeTag: Codeunit \"Upgrade Tag\";",
			"        NUNUpgradeTag: Codeunit \"EAD Upgrade tags\";",
			"    begin",
			"        if UpgradeTag.HasUpgradeTag(NUNUpgradeTag.GetUpgradeTagEjemplo2()) then",
			"            exit;",
			"",
			"        if NOT UpgradeTag.HasUpgradeTag(NUNUpgradeTag.GetUpgradeTagEjemplo1()) then begin",
			"            RunUpgradeEjemplo1();",
			"            UpgradeTag.SetUpgradeTag(NUNUpgradeTag.GetUpgradeTagEjemplo1());",
			"        end;",
			"",
			"        RunUpgradeEjemplo2();",
			"        UpgradeTag.SetUpgradeTag(NUNUpgradeTag.GetUpgradeTagEjemplo2());",
			"    end;",
			"",
			"    local procedure RunUpgradeEjemplo1()",
			"    begin",
			"    end;",
			"",
			"    local procedure RunUpgradeEjemplo2()",
			"    var",
			"    begin",
			"    end;",
			"}",
			"",
			"codeunit 50117 \"EAD Upgrade tags\"",
			"{",
			"    [EventSubscriber(ObjectType::Codeunit, Codeunit::\"Upgrade Tag\", 'OnGetPerCompanyUpgradeTags', '', false, false)]",
			"    local procedure RegisterPerCompanyTags(var PerCompanyUpgradeTags: List of [Code[250]])",
			"    begin",
			"        PerCompanyUpgradeTags.Add(GetUpgradeTagEjemplo1);",
			"        PerCompanyUpgradeTags.Add(GetUpgradeTagEjemplo2);",
			"    end;",
			"",
			"    [EventSubscriber(ObjectType::Codeunit, Codeunit::\"Upgrade Tag\", 'OnGetPerDatabaseUpgradeTags', '', false, false)]",
			"    local procedure RegisterPerDatabaseTags(var PerDatabaseUpgradeTags: List of [Code[250]])",
			"    begin",
			"        PerDatabaseUpgradeTags.Add(GetUpgradeTagPerDB);",
			"    end;",
			"",
			"    procedure GetUpgradeTagEjemplo1(): code[250]",
			"    begin",
			"        exit('EAD-427349-FixCustomer-08052020')",
			"    end;",
			"",
			"    procedure GetUpgradeTagEjemplo2(): code[250]",
			"    begin",
			"        exit('EAD-5b9182-FixVendor-09052020')",
			"    end;",
			"",
			"    procedure GetUpgradeTagPerDB(): code[250]",
			"    begin",
			"        exit('EAD-5b2282-PerData-10052020')",
			"    end;",
			"}"
		],
		"description": "Upgrade tags/gestionar CU de upgrade Ampliada (EAD)"
	},
	"tutiltraduccionconexpresionesregulares": {
		"prefix": "tutil traduccion con expresiones regulares (EAD)",
		"body": [
			"/*",
			"Traducciones con expresiones regulares ",
			"Esto nos permitira, trabajar con dos traducciones, idioma original en ingles y traduccion, en este caso español.",
			"",
			"1) Activaremos en app.json la feature de translationfile.",
			"",
			"2) Crearemos los labels, caption, tooltip, etc. Con la siguiente estructura.",
			"    Caption = 'Name', comment = 'Nombre';",
			"",
			"3) Copiaremos el fichero xlf que se genera al compilar en misma carpeta translations.",
			"",
			"4) Modificaremos el nombre agregando es-ES al nombre quedando algo como \"nombre.es-ES.g.xlf\".",
			"",
			"5) Abrimos el archivo nuevo y cambiamos target-language a \"es-ES\".",
			"",
			"6) Abrimos el archivo nuevo desde vscode buscamos dentro de el con ctrl + F presionamos la imagen de usar expresiones regulares o RegExp (Alt+R).",
			"",
			"7) Click en la flechita para desplegar el replace. ",
			"",
			"8) Pegamos lo siguiente:",
			"En Find:  ",
			"    <note from=\"D(.*?)>(.*?)</note> ",
			"",
			"En Replace: ",
			"    <note from=\"D$1>$2</note>\\n\\t\\t\\t\\t\\t<target>$2</target> ",
			"",
			"9) Remplazamos todos.",
			"*/"
		],
		"description": "Traduccion con expresiones regulares (EAD)"
	},
	"tutilformatofecha": {
		"prefix": "tutil formato fecha (EAD)",
		"body": [
			"Format(WorkDate(),0,'<Day,2>*<Month,2>*<Year4>'); "
		],
		"description": "Formato fecha (EAD)"
	},
	"tutilexpresionregularparaencontrarfallostraduciones": {
		"prefix": "tutil expresion regular para encontrar fallos traduciones (EAD)",
		"body": [
			"// Expresion regular encontrar fallos en fichero de traducciones.\r",
			"// Buscar dentro del fichero que se genera automaticamente al compilar, despues copiar el texto que tiene el error, buscarlo en BC y modificarlo.\r",
			"// <note from=\"D(.*?)>ESP=\"(.*?)\"(.*?)\"|PSE=|PES=|SEP=|SPE=|EPS=|ESP =|ESP= |ESP\"|'|\\*|`|´| ESP=(.*?)</note>"
		],
		"description": "Expresion regular para encontrar fallos traduciones (EAD)"
	},
	"tutilboundaction": {
		"prefix": "tutil bound action para paginas WS (EAD)",
		"body": [
			"    // Colocar en page\r",
			"    // Accion asociada a una entidad sin parametro ni retorno. \r",
			"    [ServiceEnabled]\r",
			"    procedure ClonarCliente(var ActionContext: WebServiceActionContext)\r",
			"    var\r",
			"        EADParaacciones: Codeunit \"EAD Para acciones\";\r",
			"    begin\r",
			"        EADParaacciones.ClonarCust(Rec.\"No.\");\r",
			"        ActionContext.SetObjectType(ObjectType::Page);\r",
			"        ActionContext.SetObjectId(Page::\"EAD Page WS\");\r",
			"        ActionContext.AddEntityKey(Rec.FieldNo(\"No.\"), Rec.\"No.\");\r",
			"        ActionContext.SetResultCode(WebServiceActionResultCode::Created);\r",
			"    end;\r",
			"\r",
			"    // Accion asociada a una entidad con parametro y retorno. \r",
			"    [ServiceEnabled]\r",
			"    procedure ClonarClienteConParametroYRetorno(nombre: Text[100]): code[20]\r",
			"    var\r",
			"        NUNParaacciones: Codeunit \"EAD Para acciones\";\r",
			"        ActionContext: WebServiceActionContext;\r",
			"    begin\r",
			"        ActionContext.SetObjectType(ObjectType::Page);\r",
			"        ActionContext.SetObjectId(Page::\"EAD Page WS\");\r",
			"        ActionContext.AddEntityKey(Rec.FieldNo(\"No.\"), Rec.\"No.\");\r",
			"        ActionContext.SetResultCode(WebServiceActionResultCode::Get);\r",
			"        exit(EADParaacciones.ClonarCust(Rec.\"No.\", nombre));\r",
			"    end;"
		],
		"description": "Bound action para paginas WS (EAD)"
	},
	"tutiltrabajarconenum": {
		"prefix": "tutil trabajar con enum (EAD)",
		"body": [
			"    trigger OnOpenPage();",
			"    var",
			"        NUNEnumColor: Enum \"NUN Enum Color\";",
			"    begin",
			"        Message('Obtener Caption desde indice con Format : ' + Format(NUNEnumColor::GREEN));",
			"        Message('Obtener indice de ENUM desde nombre en texto : ' + Format(ObtenerIndiceEnumDesdeNombre('RED')));",
			"        Message('Obtener nombre desde indice usando var integer: ' + ObtenerNombreDelEnumDesdeIndice(0));",
			"        Message('Obtener nombre desde indice usando indexOF : ' + ObtenerNombreDelEnumDesdeIndice2(NUNEnumColor::RED));",
			"    end;",
			"",
			"    procedure ObtenerIndiceEnumDesdeNombre(TextoEnum: Text) Indice: Integer",
			"    var",
			"        NUNEnumColor: Enum \"NUN Enum Color\";",
			"    begin",
			"        Indice := NUNEnumColor.Names().IndexOf(TextoEnum);",
			"        if Indice > 0 then",
			"            Indice -= 1;",
			"        exit(Indice);",
			"    end;",
			"",
			"    procedure ObtenerNombreDelEnumDesdeIndice(Indice: integer) Nombre: Text",
			"    var",
			"        NUNEnumColor: Enum \"NUN Enum Color\";",
			"    begin",
			"        Indice += 1;",
			"        NUNEnumColor.Names().Get(Indice, Nombre);",
			"        exit(Nombre);",
			"    end;",
			"",
			"    procedure ObtenerNombreDelEnumDesdeIndice2(NUNEnumColor: Enum \"NUN Enum Color\") Nombre: Text",
			"    var",
			"        Indice: Integer;",
			"    begin",
			"        Indice := NUNEnumColor.Ordinals().IndexOf(NUNEnumColor.AsInteger());",
			"        NUNEnumColor.Names().Get(Indice, Nombre);",
			"        exit(Nombre);",
			"    end;"
		],
		"description": "Trabajar con enum (EAD)"
	},
	"tonassisteditmostraruncampoygrabarotro": {
		"prefix": "tonassisedit mostrar un campo en pagina y guardar otro en tabla (EAD)",
		"body": [
			"    // Grabar\r",
			"    trigger OnAssistEdit()\r",
			"    var\r",
			"        Deporte: Record \"Deporte\";\r",
			"    begin\r",
			"        // Visualizar un campo en pagina pero guardar el que tiene la relacion onAssisEdit. \r",
			"        if Action::LookupOK = Page.RunModal(page::\"Deporte List\", Deporte) then begin\r",
			"            // Guardamos el valor que tiene la relacion\r",
			"            VALIDATE(\"Codigo\", Deporte.Codigo);\r",
			"            // Variable global que sera un campo de la pagina donde visualizaremos la descripcion.\r",
			"            GobalVar := Deporte.Nombre;\r",
			"        end;\r",
			"    end;\r",
			"\r",
			"    // Visualizar cuando abrimos la pagina o cambiamos de registro necesitaremos que la variable global se rellene\r",
			"    trigger OnAfterGetRecord()\r",
			"    var\r",
			"        Deporte: Record \"Deporte\";\r",
			"    begin\r",
			"        if Deporte.Get(\"Tipo Deporte\") then\r",
			"            GobalVar := Deporte.\"Deporte\";\r",
			"    end;"
		],
		"description": "tonassisedit mostrar un campo en pagina y guardar otro en tabla (EAD)"
	},
	"texternalsql": {
		"prefix": "texternalsql mapear db externa (EAD)",
		"body": [
			"/*\r",
			"NOTA: Para trabajar con external SQL tendremos que seguir estos pasos:\r",
			"1 - Agregar al app.json la llave \"target\": \"OnPrem\"\r",
			"2 - Crear la tabla que usaremos para mapear y agregarle las siguientes propiedades:\r",
			"    - Tabletype = ExternalSQL.\r",
			"    - External = Nombre de la db en SQL.\r",
			"    - ExternalSchema = 'dbo' o el esquema de nuestra DB.\r",
			"3 - Crearemos cada uno de los campos que maperaremos con un tipo de dato parecido al que tienen los campos de nuestra DB en SQL y indicaremos las siguientes propiedades:\r",
			"    - ExternalNme = Nombre del campo en la tabla de SQL.\r",
			"    - SqlDataType = Tipo de dato del campo en la tabla SQL, Ejmp: Varchar.\r",
			"4 - Crearemos una pagina indicando en sourcetable la tabla que creamos anteriormente, mostrando todos sus campos.\r",
			"5 - En el trigger onInit llamaremos a la funcion de la codeunit que crearemos a continuacion:\r",
			"*/\r",
			"codeunit 50101 \"Connect SQL Veh\"\r",
			"{\r",
			"    trigger OnRun()\r",
			"    begin\r",
			"        ConnectToSql();\r",
			"    end;\r",
			"\r",
			"    local procedure ConnectToSql()\r",
			"    var\r",
			"        DatabaseName: Text[50];\r",
			"        DatabaseConnectionString: Text;\r",
			"    begin\r",
			"        DatabaseName := 'NombreDeLaBDSQL';\r",
			"\r",
			"        IF HasTableConnection(TableConnectionType::ExternalSQL, DatabaseName) then\r",
			"            UnregisterTableConnection(TableConnectionType::ExternalSQL, DatabaseName);\r",
			"\r",
			"        //DOCKER\r",
			"        //DB Express Interna\r",
			"        DatabaseConnectionString := 'Data Source=FORMACION1\\SQLEXPRESS;Initial Catalog=' + DatabaseName + ';Integrated Security=SSPI;';\r",
			"\r",
			"        //En instalacion local\r",
			"        //DatabaseConnectionString := 'Data Source=DIII-ANNA\\TEST;Initial Catalog=' + DatabaseName + ';Integrated Security=SSPI;';\r",
			"\r",
			"        RegisterTableConnection(TableConnectionType::ExternalSQL, DatabaseName, DatabaseConnectionString);\r",
			"        SetDefaultTableConnection(TableConnectionType::ExternalSQL, DatabaseName);\r",
			"    end;\r",
			"}\r",
			"\r",
			"/*\r",
			"En caso de fallo podria ser lo siguiente:\r",
			"    - No se encuentra activada las llamadas TCP/IP de la configuracion de SQLServer.\r",
			"    - La instancia solo permite authentificacion Windows.\r",
			"    - El usuario que ejecuta el servicio de BC no es un usuario valido mapeado en la BD SQL (En caso de docker tendremos que mapear \"NT AUTHORITY\\SYSTEM\").\r",
			"    - Las conexiones las realizaremos de la siguiente manera: \r",
			"        Para Desarrollo la DB externa estara dentro del SQL contenedor y mapearemos \"NT AUTHORITY\\SYSTEM\".\r",
			"        Para Pro la DB externa estara en la misma instancia del SQL donde tendremos la DB de Business Central.\r",
			"    NOTA: SI intentamos conectarnos desde un contenedor a una DB externa en otro equipo o en local pero fuera del contenedor con las pruebas que he realizado\r",
			"          no he podido por temas de usuarios dentro del contenedor y SQL a donde me conecto.    \r",
			"*/"
		],
		"description": "Mapear db externa (EAD)"
	},
	"tutiltrabajarjsonanidados": {
		"prefix": "tutil trabajar json anidados (EAD)",
		"body": [
			"  /*Ejemplo Imaginando si es un Json Anidado\r",
			"    { \r",
			"        status: “Status”,\r",
			"        info: “INFO”,\r",
			"        details: {\r",
			"            info: “INFO2”,\r",
			"            details: “Details2”\r",
			"        },\r",
			"        freemail: “true”\r",
			"    }\r",
			"    */\r",
			"    procedure PopulateJsonEjemplo(JsonText: Text[2048]): Boolean\r",
			"    var\r",
			"        ResponseMessage: HttpResponseMessage;\r",
			"        JsonObj: JsonObject;\r",
			"        JsonObjAnidado: JsonObject;\r",
			"        ResultStatus: Integer;\r",
			"        ResultInfo: Text;\r",
			"        ResultInfo2: Text;\r",
			"        ResultDetails: Text;\r",
			"        Freemail: Boolean;\r",
			"    begin\r",
			"        // Las variables ResultStatus, ResultInfo, ResultInfo2, ResultDetails y Freemail. Se supone que seran campos de tabla donde se encuentre esta funcion \r",
			"        ResponseMessage.Content().ReadAs(JsonText);\r",
			"        // Primero obtendria los valores de los tokens que estan en el primer nivel\r",
			"        ResultStatus := GetJsonValue(JsonObj, 'status').AsInteger();\r",
			"        ResultInfo := GetJsonValue(JsonObj, 'info').AsText();\r",
			"        Freemail := GetJsonValue(JsonObj, 'freemail').AsBoolean();\r",
			"\r",
			"        // Posicionaria el objeto Json en la llave detail\r",
			"        JsonObjAnidado := SelectJsonObject(JsonObj, 'detail');\r",
			"\r",
			"        // Obtendremos los valores de JsonObjAnidado\r",
			"        ResultInfo2 := GetJsonValue(JsonObjAnidado, 'info2').AsText();\r",
			"        ResultDetails := GetJsonValue(JsonObjAnidado, 'detail2').AsText();\r",
			"        // Fin ejemplo Json Anidado\r",
			"\r",
			"        // Aqui un insert\r",
			"    end;\r",
			"\r",
			"    // Los procedimientos podriamos colocarlos en una CU\r",
			"    procedure GetJsonValue(JsonObj: JsonObject; Property: Text): JsonValue\r",
			"    var\r",
			"        JToken: JsonToken;\r",
			"        JsonTokenNotFoundErr: Label 'Could not find JsonToken %1', Comment = 'ESP=\"No puedo encontrar JsonToken %1\"';\r",
			"        JsonTokenIsNotValueErr: Label 'The Json object is malformed. Could not find Json value %1',\r",
			"                                    Comment = 'ESP=\"El objeto Json está mal formado. No puedo encontrar el valor Json %1\"';\r",
			"    begin\r",
			"        if not JsonObj.Get(Property, JToken) then\r",
			"            Error(JsonTokenNotFoundErr, Property);\r",
			"\r",
			"        if not JToken.IsValue() then\r",
			"            Error(JsonTokenIsNotValueErr, Property);\r",
			"\r",
			"        exit(JToken.AsValue());\r",
			"    end;\r",
			"\r",
			"    procedure SelectJsonObject(JsonObj: JsonObject; Path: Text): JsonObject\r",
			"    var\r",
			"        JToken: JsonToken;\r",
			"        JsonTokenNotFoundErr: Label 'Could not find JsonToken %1', Comment = 'ESP=\"No puedo encontrar JsonToken %1\"';\r",
			"        JsonTokenIsNotObjectErr: Label 'The Json object is malformed. Could not find Json object %1',\r",
			"                            Comment = 'ESP=\"El objeto Json está mal formado. No puedo encontrar el objeto Json %1\"';\r",
			"    begin\r",
			"        if not JsonObj.SelectToken(Path, JToken) then\r",
			"            Error(JsonTokenNotFoundErr, Path);\r",
			"\r",
			"        if not JToken.IsObject() then\r",
			"            Error(JsonTokenIsNotObjectErr, Path);\r",
			"\r",
			"        exit(JToken.AsObject());\r",
			"    end;"
		],
		"description": "Trabajar json anidados (EAD)"
	},
	"tutiltableralationenfunciondeotrocampodelatabla": {
		"prefix": "tutil tablerelation en funcion de otro campo de la tabla (EAD)",
		"body": [
			"    // Table relacion en funcion de otro campo de la tabla\r",
			"    TableRelation = IF (\"Country/Region Code\" = CONST('')) \"Post Code\".City\r",
			"    ELSE\r",
			"    IF (\"Country/Region Code\" = FILTER(<> '')) \"Post Code\".City WHERE(\"Country/Region Code\" = FIELD(\"Country/Region Code\"));\r",
			"    //This property is currently not supported\r",
			"    //TestTableRelation = false;\r",
			"    ValidateTableRelation = false;"
		],
		"description": "Tablerelation en funcion de otro campo de la tabla (EAD)"
	},
	"tutillanzartestdesdevscode": {
		"prefix": "tutil lanzar test desde VSCode testrunner (EAD)",
		"body": [
			"codeunit 50100 \"TestRunner\"\r",
			"{\r",
			"    Subtype = TestRunner;\r",
			"\r",
			"    trigger OnRun()\r",
			"    begin\r",
			"        codeunit.Run(Codeunit::\"Test codeunit\"); //Aqui crearemos una linea por cada CodeUnit de test que tengamos.\r",
			"\r",
			"        Message('\\Test Satisfactorios: ' + Format(SuccessTest) + '\\Test Fallidos: ' + Format(FailedTests));\r",
			"    end;\r",
			"\r",
			"    trigger OnAfterTestRun(CodeunitId: Integer; CodeunitName: Text; FunctionName: Text; Permissions: TestPermissions; Success: Boolean)\r",
			"    begin\r",
			"        if Success then\r",
			"            SuccessTest += 1\r",
			"        else\r",
			"            if FunctionName <> '' then begin\r",
			"                FailedTests += 1;\r",
			"                Message(FunctionName + ': ' + GetLastErrorText());\r",
			"            end;\r",
			"    end;\r",
			"\r",
			"    var\r",
			"        SuccessTest: Integer;\r",
			"        FailedTests: Integer;\r",
			"}\r",
			"\r",
			"/*\r",
			"Crear archivo TestRunner.ps1 el cual tendremos en la raiz del proyecto y lanzaremos por termina de Vscode con .\\TestRunner.ps1\r",
			"Contenido del archivo\r",
			"Invoke-NavContainerCodeunit -Codeunitid 50100 -containerName NombreCTN -CompanyName \"CRONUS España S.A.\"\r",
			"*/\r",
			""
		],
		"description": "Lanzar test desde VSCode testrunner (EAD)"
	},
	"tutilpaginawebdentrobccontroladdin": {
		"prefix": "tutil pagina web dentro BC controlAddin (EAD)",
		"body": [
			"controladdin \"Page Addin\"\r",
			"{\r",
			"    RequestedHeight = 800;\r",
			"    VerticalStretch = true;\r",
			"    VerticalShrink = true;\r",
			"    HorizontalStretch = true;\r",
			"    HorizontalShrink = true;\r",
			"    Scripts = 'src\\ControllAddin\\page\\page.js';\r",
			"    StyleSheets = 'src\\ControllAddin\\page\\style.css';\r",
			"    StartupScript = 'src\\ControllAddin\\page\\start.js';\r",
			"\r",
			"    event Ready()\r",
			"\r",
			"    procedure embedHomePage()\r",
			"}\r",
			"\r",
			"/* Page.js\r",
			"function createIframe(){\r",
			"    var placeholder = document.getElementById('controlAddIn');\r",
			"    var webPage = document.createElement('iframe');\r",
			"    webPage.id = 'webPage';\r",
			"    webPage.height = '100%';\r",
			"    webPage.width = '100%';\r",
			"    placeholder.appendChild(webPage);\r",
			"}\r",
			"\r",
			"function embedHomePage(){\r",
			"    createIframe();\r",
			"    var webPage = document.getElementById('webPage');\r",
			"    webPage.src = 'https://page.com/';\r",
			"}\r",
			"*/\r",
			"\r",
			"//Start.js\r",
			"//Microsoft.Dynamics.NAV.InvokeExtensibilityMethod('Ready','');\r",
			"\r",
			"//Style.ccs\r",
			"\r",
			"\r",
			"pageextension 50100 \"NUN Customer Card\" extends \"Customer Card\"\r",
			"{\r",
			"    layout\r",
			"    {\r",
			"        addfirst(factboxes)\r",
			"        {\r",
			"            part(PageAddin; \"PageAddin CardPart\")\r",
			"            {\r",
			"                ApplicationArea = All;\r",
			"            }\r",
			"        }\r",
			"    }\r",
			"}\r",
			"\r",
			"\r",
			"page 50100 \"PageAddin CardPart\"\r",
			"{\r",
			"    Caption = 'Page';\r",
			"    PageType = CardPart;\r",
			"    ApplicationArea = All;\r",
			"    UsageCategory = Administration;\r",
			"\r",
			"    layout\r",
			"    {\r",
			"        area(Content)\r",
			"        {\r",
			"            usercontrol(PageAdd; \"Page Addin\")\r",
			"            {\r",
			"                ApplicationArea = All;\r",
			"\r",
			"                trigger Ready()\r",
			"                begin\r",
			"                    CurrPage.PageAdd.embedHomePage();\r",
			"                end;\r",
			"            }\r",
			"        }\r",
			"    }\r",
			"}"
		],
		"description": "Pagina web dentro BC controlAddin (EAD)"
	}
}